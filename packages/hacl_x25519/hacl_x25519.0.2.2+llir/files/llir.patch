diff --git a/hacl_x25519.opam b/hacl_x25519.opam
index 651caf9..c92fd8f 100644
--- a/hacl_x25519.opam
+++ b/hacl_x25519.opam
@@ -1,6 +1,6 @@
-version: "0.2.2"
 # This file is generated by dune, edit dune-project instead
 opam-version: "2.0"
+version: "v0.2.2"
 synopsis:
   "Primitives for Elliptic Curve Cryptography taken from Project Everest"
 description: """
@@ -51,4 +51,4 @@ build: [
     "@doc" {with-doc}
   ]
 ]
-dev-repo: "git+https://github.com/mirage/hacl.git"
\ No newline at end of file
+dev-repo: "git+https://github.com/mirage/hacl.git"
diff --git a/src/Hacl_Ed25519.c b/src/Hacl_Ed25519.c
index e6b0df5..cc2bffc 100644
--- a/src/Hacl_Ed25519.c
+++ b/src/Hacl_Ed25519.c
@@ -570,7 +570,7 @@ static void point_compress(uint8_t *z, uint64_t *p)
 
 static void secret_expand(uint8_t *expanded, uint8_t *secret)
 {
-  Hacl_Hash_SHA2_hash_512(secret, (uint32_t)32U, expanded);
+  _Hacl_Hash_SHA2_hash_512(secret, (uint32_t)32U, expanded);
   uint8_t *h_low = expanded;
   uint8_t h_low0 = h_low[0U];
   uint8_t h_low31 = h_low[31U];
@@ -1596,7 +1596,7 @@ static void sha512_pre_msg(uint8_t *h, uint8_t *prefix, uint32_t len, uint8_t *i
   memset(pre_msg, 0U, (len + (uint32_t)32U) * sizeof (pre_msg[0U]));
   memcpy(pre_msg, prefix, (uint32_t)32U * sizeof (prefix[0U]));
   memcpy(pre_msg + (uint32_t)32U, input, len * sizeof (input[0U]));
-  Hacl_Hash_SHA2_hash_512(pre_msg, len + (uint32_t)32U, h);
+  _Hacl_Hash_SHA2_hash_512(pre_msg, len + (uint32_t)32U, h);
 }
 
 static void
@@ -1614,7 +1614,7 @@ sha512_pre_pre2_msg(
   memcpy(pre_msg, prefix, (uint32_t)32U * sizeof (prefix[0U]));
   memcpy(pre_msg + (uint32_t)32U, prefix2, (uint32_t)32U * sizeof (prefix2[0U]));
   memcpy(pre_msg + (uint32_t)64U, input, len * sizeof (input[0U]));
-  Hacl_Hash_SHA2_hash_512(pre_msg, len + (uint32_t)64U, h);
+  _Hacl_Hash_SHA2_hash_512(pre_msg, len + (uint32_t)64U, h);
 }
 
 static void sha512_modq_pre(uint64_t *out, uint8_t *prefix, uint32_t len, uint8_t *input)
@@ -2016,7 +2016,7 @@ static bool point_equal(uint64_t *p, uint64_t *q)
   return false;
 }
 
-void Hacl_Ed25519_sign(uint8_t *signature, uint8_t *priv, uint32_t len, uint8_t *msg)
+void _Hacl_Ed25519_sign(uint8_t *signature, uint8_t *priv, uint32_t len, uint8_t *msg)
 {
   uint8_t tmp_bytes[352U] = { 0U };
   uint64_t tmp_ints[65U] = { 0U };
@@ -2031,7 +2031,7 @@ void Hacl_Ed25519_sign(uint8_t *signature, uint8_t *priv, uint32_t len, uint8_t
   memcpy(signature + (uint32_t)32U, s_, (uint32_t)32U * sizeof (s_[0U]));
 }
 
-bool Hacl_Ed25519_verify(uint8_t *pub, uint32_t len, uint8_t *msg, uint8_t *signature)
+bool _Hacl_Ed25519_verify(uint8_t *pub, uint32_t len, uint8_t *msg, uint8_t *signature)
 {
   uint64_t tmp[45U] = { 0U };
   uint8_t tmp_[32U] = { 0U };
@@ -2086,18 +2086,18 @@ bool Hacl_Ed25519_verify(uint8_t *pub, uint32_t len, uint8_t *msg, uint8_t *sign
   return res0;
 }
 
-void Hacl_Ed25519_secret_to_public(uint8_t *pub, uint8_t *priv)
+void _Hacl_Ed25519_secret_to_public(uint8_t *pub, uint8_t *priv)
 {
   secret_to_public(pub, priv);
 }
 
-void Hacl_Ed25519_expand_keys(uint8_t *ks, uint8_t *priv)
+void _Hacl_Ed25519_expand_keys(uint8_t *ks, uint8_t *priv)
 {
   secret_expand(ks + (uint32_t)32U, priv);
   secret_to_public(ks, priv);
 }
 
-void Hacl_Ed25519_sign_expanded(uint8_t *signature, uint8_t *ks, uint32_t len, uint8_t *msg)
+void _Hacl_Ed25519_sign_expanded(uint8_t *signature, uint8_t *ks, uint32_t len, uint8_t *msg)
 {
   uint8_t tmp_bytes[352U] = { 0U };
   uint64_t tmp_ints[65U] = { 0U };
diff --git a/src/Hacl_Ed25519.h b/src/Hacl_Ed25519.h
index 2365108..cff7ad1 100644
--- a/src/Hacl_Ed25519.h
+++ b/src/Hacl_Ed25519.h
@@ -28,23 +28,23 @@
 #include <string.h>
 #include "kremlin/internal/target.h"
 
-#ifndef __Hacl_Ed25519_H
-#define __Hacl_Ed25519_H
+#ifndef ___Hacl_Ed25519_H
+#define ___Hacl_Ed25519_H
 
 #include "Hacl_Kremlib.h"
 #include "Hacl_Hash.h"
 #include "Hacl_Curve25519_51.h"
 
 
-void Hacl_Ed25519_sign(uint8_t *signature, uint8_t *priv, uint32_t len, uint8_t *msg);
+void _Hacl_Ed25519_sign(uint8_t *signature, uint8_t *priv, uint32_t len, uint8_t *msg);
 
-bool Hacl_Ed25519_verify(uint8_t *pub, uint32_t len, uint8_t *msg, uint8_t *signature);
+bool _Hacl_Ed25519_verify(uint8_t *pub, uint32_t len, uint8_t *msg, uint8_t *signature);
 
-void Hacl_Ed25519_secret_to_public(uint8_t *pub, uint8_t *priv);
+void _Hacl_Ed25519_secret_to_public(uint8_t *pub, uint8_t *priv);
 
-void Hacl_Ed25519_expand_keys(uint8_t *ks, uint8_t *priv);
+void _Hacl_Ed25519_expand_keys(uint8_t *ks, uint8_t *priv);
 
-void Hacl_Ed25519_sign_expanded(uint8_t *signature, uint8_t *ks, uint32_t len, uint8_t *msg);
+void _Hacl_Ed25519_sign_expanded(uint8_t *signature, uint8_t *ks, uint32_t len, uint8_t *msg);
 
-#define __Hacl_Ed25519_H_DEFINED
+#define ___Hacl_Ed25519_H_DEFINED
 #endif
diff --git a/src/Hacl_Hash.c b/src/Hacl_Hash.c
index a64dcd3..4634ff1 100644
--- a/src/Hacl_Hash.c
+++ b/src/Hacl_Hash.c
@@ -24,18 +24,18 @@
 
 #include "Hacl_Hash.h"
 
-void Hacl_Hash_SHA2_update_multi_512(uint64_t *s, uint8_t *blocks, uint32_t n_blocks)
+void _Hacl_Hash_SHA2_update_multi_512(uint64_t *s, uint8_t *blocks, uint32_t n_blocks)
 {
   for (uint32_t i = (uint32_t)0U; i < n_blocks; i++)
   {
     uint32_t sz = (uint32_t)128U;
     uint8_t *block = blocks + sz * i;
-    Hacl_Hash_Core_SHA2_update_512(s, block);
+    _Hacl_Hash_Core_SHA2_update_512(s, block);
   }
 }
 
 void
-Hacl_Hash_SHA2_update_last_512(
+_Hacl_Hash_SHA2_update_last_512(
   uint64_t *s,
   FStar_UInt128_uint128 prev_len,
   uint8_t *input,
@@ -47,7 +47,7 @@ Hacl_Hash_SHA2_update_last_512(
   uint8_t *blocks = input;
   uint32_t rest_len = input_len - blocks_len;
   uint8_t *rest = input + blocks_len;
-  Hacl_Hash_SHA2_update_multi_512(s, blocks, blocks_n);
+  _Hacl_Hash_SHA2_update_multi_512(s, blocks, blocks_n);
   FStar_UInt128_uint128
   total_input_len =
     FStar_UInt128_add(prev_len,
@@ -68,11 +68,11 @@ Hacl_Hash_SHA2_update_last_512(
   uint8_t *tmp_rest = tmp;
   uint8_t *tmp_pad = tmp + rest_len;
   memcpy(tmp_rest, rest, rest_len * sizeof (rest[0U]));
-  Hacl_Hash_Core_SHA2_pad_512(total_input_len, tmp_pad);
-  Hacl_Hash_SHA2_update_multi_512(s, tmp, tmp_len / (uint32_t)128U);
+  _Hacl_Hash_Core_SHA2_pad_512(total_input_len, tmp_pad);
+  _Hacl_Hash_SHA2_update_multi_512(s, tmp, tmp_len / (uint32_t)128U);
 }
 
-void Hacl_Hash_SHA2_hash_512(uint8_t *input, uint32_t input_len, uint8_t *dst)
+void _Hacl_Hash_SHA2_hash_512(uint8_t *input, uint32_t input_len, uint8_t *dst)
 {
   uint64_t
   s[8U] =
@@ -86,12 +86,12 @@ void Hacl_Hash_SHA2_hash_512(uint8_t *input, uint32_t input_len, uint8_t *dst)
   uint8_t *blocks = input;
   uint32_t rest_len = input_len - blocks_len;
   uint8_t *rest = input + blocks_len;
-  Hacl_Hash_SHA2_update_multi_512(s, blocks, blocks_n);
-  Hacl_Hash_SHA2_update_last_512(s,
+  _Hacl_Hash_SHA2_update_multi_512(s, blocks, blocks_n);
+  _Hacl_Hash_SHA2_update_last_512(s,
     FStar_UInt128_uint64_to_uint128((uint64_t)blocks_len),
     rest,
     rest_len);
-  Hacl_Hash_Core_SHA2_finish_512(s, dst);
+  _Hacl_Hash_Core_SHA2_finish_512(s, dst);
 }
 
 static uint64_t
@@ -126,7 +126,7 @@ k384_512[80U] =
     (uint64_t)0x5fcb6fab3ad6faecU, (uint64_t)0x6c44198c4a475817U
   };
 
-void Hacl_Hash_Core_SHA2_update_512(uint64_t *hash, uint8_t *block)
+void _Hacl_Hash_Core_SHA2_update_512(uint64_t *hash, uint8_t *block)
 {
   uint64_t hash1[8U] = { 0U };
   uint64_t computed_ws[80U] = { 0U };
@@ -201,7 +201,7 @@ void Hacl_Hash_Core_SHA2_update_512(uint64_t *hash, uint8_t *block)
   }
 }
 
-void Hacl_Hash_Core_SHA2_pad_512(FStar_UInt128_uint128 len, uint8_t *dst)
+void _Hacl_Hash_Core_SHA2_pad_512(FStar_UInt128_uint128 len, uint8_t *dst)
 {
   uint8_t *dst1 = dst;
   dst1[0U] = (uint8_t)0x80U;
@@ -240,7 +240,7 @@ void Hacl_Hash_Core_SHA2_pad_512(FStar_UInt128_uint128 len, uint8_t *dst)
   store128_be(dst3, len_);
 }
 
-void Hacl_Hash_Core_SHA2_finish_512(uint64_t *s, uint8_t *dst)
+void _Hacl_Hash_Core_SHA2_finish_512(uint64_t *s, uint8_t *dst)
 {
   uint64_t *uu____0 = s;
   for (uint32_t i = (uint32_t)0U; i < (uint32_t)8U; i++)
diff --git a/src/Hacl_Hash.h b/src/Hacl_Hash.h
index e0510b5..4abf94b 100644
--- a/src/Hacl_Hash.h
+++ b/src/Hacl_Hash.h
@@ -28,31 +28,31 @@
 #include <string.h>
 #include "kremlin/internal/target.h"
 
-#ifndef __Hacl_Hash_H
-#define __Hacl_Hash_H
+#ifndef ___Hacl_Hash_H
+#define ___Hacl_Hash_H
 
 #include "Hacl_Kremlib.h"
 #include "Hacl_Spec.h"
 
-void Hacl_Hash_SHA2_update_multi_512(uint64_t *s, uint8_t *blocks, uint32_t n_blocks);
+void _Hacl_Hash_SHA2_update_multi_512(uint64_t *s, uint8_t *blocks, uint32_t n_blocks);
 
 void
-Hacl_Hash_SHA2_update_last_512(
+_Hacl_Hash_SHA2_update_last_512(
   uint64_t *s,
   FStar_UInt128_uint128 prev_len,
   uint8_t *input,
   uint32_t input_len
 );
 
-void Hacl_Hash_SHA2_hash_512(uint8_t *input, uint32_t input_len, uint8_t *dst);
+void _Hacl_Hash_SHA2_hash_512(uint8_t *input, uint32_t input_len, uint8_t *dst);
 
-void Hacl_Hash_Core_SHA2_init_512(uint64_t *s);
+void _Hacl_Hash_Core_SHA2_init_512(uint64_t *s);
 
-void Hacl_Hash_Core_SHA2_update_512(uint64_t *hash, uint8_t *block);
+void _Hacl_Hash_Core_SHA2_update_512(uint64_t *hash, uint8_t *block);
 
-void Hacl_Hash_Core_SHA2_pad_512(FStar_UInt128_uint128 len, uint8_t *dst);
+void _Hacl_Hash_Core_SHA2_pad_512(FStar_UInt128_uint128 len, uint8_t *dst);
 
-void Hacl_Hash_Core_SHA2_finish_512(uint64_t *s, uint8_t *dst);
+void _Hacl_Hash_Core_SHA2_finish_512(uint64_t *s, uint8_t *dst);
 
-#define __Hacl_Hash_H_DEFINED
+#define ___Hacl_Hash_H_DEFINED
 #endif
diff --git a/src/hacl_ed25519.ml b/src/hacl_ed25519.ml
index 20899a9..2dd2948 100644
--- a/src/hacl_ed25519.ml
+++ b/src/hacl_ed25519.ml
@@ -11,7 +11,7 @@ let priv cs =
 let encode_priv (`Checked cs) = cs
 
 external s_to_p : Cstruct.buffer -> Cstruct.buffer -> unit
-  = "ml_Hacl_Ed25519_secret_to_public"
+  = "ml__Hacl_Ed25519_secret_to_public"
   [@@noalloc]
 
 let priv_to_public priv =
@@ -21,12 +21,12 @@ let priv_to_public priv =
 
 external ed25519_sign :
   Cstruct.buffer -> Cstruct.buffer -> Cstruct.buffer -> int -> unit
-  = "ml_Hacl_Ed25519_sign"
+  = "ml__Hacl_Ed25519_sign"
   [@@noalloc]
 
 external ed25519_verify :
   Cstruct.buffer -> Cstruct.buffer -> int -> Cstruct.buffer -> bool
-  = "ml_Hacl_Ed25519_verify"
+  = "ml__Hacl_Ed25519_verify"
   [@@noalloc]
 
 let sign priv msg =
diff --git a/src/hacl_x25519_stubs.c b/src/hacl_x25519_stubs.c
index 3068b91..4043f55 100644
--- a/src/hacl_x25519_stubs.c
+++ b/src/hacl_x25519_stubs.c
@@ -12,25 +12,25 @@ CAMLprim value ml_Hacl_Curve25519_crypto_scalarmult (value pk, value sk, value b
     CAMLreturn(Val_unit);
 }
 
-CAMLprim value ml_Hacl_Ed25519_secret_to_public (value out, value sk) {
+CAMLprim value ml__Hacl_Ed25519_secret_to_public (value out, value sk) {
     CAMLparam2(out, sk);
-    Hacl_Ed25519_secret_to_public(Caml_ba_data_val(out), Caml_ba_data_val(sk));
+    _Hacl_Ed25519_secret_to_public(Caml_ba_data_val(out), Caml_ba_data_val(sk));
     CAMLreturn(Val_unit);
 }
 
-CAMLprim value ml_Hacl_Ed25519_sign (value sig, value sk, value msg, value len) {
+CAMLprim value ml__Hacl_Ed25519_sign (value sig, value sk, value msg, value len) {
     CAMLparam4(sig, sk, msg, len);
-    Hacl_Ed25519_sign(Caml_ba_data_val(sig),
+    _Hacl_Ed25519_sign(Caml_ba_data_val(sig),
                       Caml_ba_data_val(sk),
                       Int_val(len),
                       Caml_ba_data_val(msg));
     CAMLreturn(Val_unit);
 }
 
-CAMLprim value ml_Hacl_Ed25519_verify (value pub, value msg, value len, value sig) {
+CAMLprim value ml__Hacl_Ed25519_verify (value pub, value msg, value len, value sig) {
     CAMLparam4(pub, msg, len, sig);
     bool r;
-    r = Hacl_Ed25519_verify(Caml_ba_data_val(pub),
+    r = _Hacl_Ed25519_verify(Caml_ba_data_val(pub),
 		            Int_val(len),
                             Caml_ba_data_val(msg),
                             Caml_ba_data_val(sig));
