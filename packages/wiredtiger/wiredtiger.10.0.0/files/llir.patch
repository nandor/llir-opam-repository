diff --git a/ext/test/fail_fs/fail_fs.c b/ext/test/fail_fs/fail_fs.c
index 8a18e6b..13d2677 100644
--- a/ext/test/fail_fs/fail_fs.c
+++ b/ext/test/fail_fs/fail_fs.c
@@ -35,7 +35,7 @@
 #include <unistd.h>
 #include <fcntl.h>
 #include <sys/stat.h>
-#include <execinfo.h>
+//#include <execinfo.h>
 
 #include <wiredtiger_ext.h>
 #include "queue.h"
@@ -658,6 +658,7 @@ fail_fs_simulate_fail(
 
     fail_fs = fail_fh->fail_fs;
     if (fail_fs->verbose) {
+        /*
         wtext = fail_fs->wtext;
         (void)wtext->msg_printf(wtext, session,
           "fail_fs: %s: simulated failure after %" PRId64 " %s operations", fail_fh->iface.name,
@@ -672,6 +673,8 @@ fail_fs_simulate_fail(
                 (void)wtext->msg_printf(wtext, session, "  %s", btstr[i]);
             free(btstr);
         }
+        */
+        abort();
     }
     return (EIO);
 }
diff --git a/src/checksum/x86/crc32-x86.c b/src/checksum/x86/crc32-x86.c
index 9ab7e14..f5e2e01 100644
--- a/src/checksum/x86/crc32-x86.c
+++ b/src/checksum/x86/crc32-x86.c
@@ -33,7 +33,7 @@
 #include <inttypes.h>
 #include <stddef.h>
 
-#if !defined(HAVE_NO_CRC32_HARDWARE)
+#if !defined(HAVE_NO_CRC32_HARDWARE) && !defined(__llir__)
 #if (defined(__amd64) || defined(__x86_64))
 /*
  * __wt_checksum_hw --
@@ -124,7 +124,7 @@ extern uint32_t (*wiredtiger_crc32c_func(void))(const void *, size_t);
  */
 uint32_t (*wiredtiger_crc32c_func(void))(const void *, size_t)
 {
-#if !defined(HAVE_NO_CRC32_HARDWARE)
+#if !defined(HAVE_NO_CRC32_HARDWARE) && !defined(__llir__)
 #if (defined(__amd64) || defined(__x86_64))
     unsigned int eax, ebx, ecx, edx;
 
diff --git a/src/include/btree_cmp_inline.h b/src/include/btree_cmp_inline.h
index 18d8a8e..263f78b 100644
--- a/src/include/btree_cmp_inline.h
+++ b/src/include/btree_cmp_inline.h
@@ -6,7 +6,7 @@
  * See the file LICENSE for redistribution information.
  */
 
-#ifdef HAVE_X86INTRIN_H
+#if defined(HAVE_X86INTRIN_H) && !defined(__llir__)
 #if !defined(_MSC_VER) && !defined(_lint)
 #include <x86intrin.h>
 #endif
@@ -39,7 +39,7 @@ __wt_lex_compare(const WT_ITEM *user_item, const WT_ITEM *tree_item)
     userp = (const uint8_t *)user_item->data;
     treep = (const uint8_t *)tree_item->data;
 
-#ifdef HAVE_X86INTRIN_H
+#if defined(HAVE_X86INTRIN_H) && !defined(__llir__)
     /* Use vector instructions if we'll execute at least 2 of them. */
     if (len >= WT_VECTOR_SIZE * 2) {
         size_t remain;
@@ -130,7 +130,7 @@ __wt_lex_compare_skip(const WT_ITEM *user_item, const WT_ITEM *tree_item, size_t
     userp = (const uint8_t *)user_item->data + *matchp;
     treep = (const uint8_t *)tree_item->data + *matchp;
 
-#ifdef HAVE_X86INTRIN_H
+#if defined(HAVE_X86INTRIN_H) && !defined(__llir__)
     /* Use vector instructions if we'll execute at least 2 of them. */
     if (len >= WT_VECTOR_SIZE * 2) {
         size_t remain;
diff --git a/src/include/gcc.h b/src/include/gcc.h
index 16241a0..d9c086e 100644
--- a/src/include/gcc.h
+++ b/src/include/gcc.h
@@ -158,6 +158,23 @@ WT_ATOMIC_FUNC(size, size_t, size_t *vp, size_t v)
 #define WT_BARRIER() __asm__ volatile("" ::: "memory")
 
 #if defined(x86_64) || defined(__x86_64__)
+#ifdef __llir__
+/* Pause instruction to prevent excess processor bus usage */
+#define WT_PAUSE() __asm__ volatile("x86_pause\n" ::: "memory")
+#define WT_FULL_BARRIER()                        \
+    do {                                         \
+        __asm__ volatile("x86_m_fence" ::: "memory"); \
+    } while (0)
+#define WT_READ_BARRIER()                        \
+    do {                                         \
+        __asm__ volatile("x86_l_fence" ::: "memory"); \
+    } while (0)
+#define WT_WRITE_BARRIER()                       \
+    do {                                         \
+        __asm__ volatile("x86_s_fence" ::: "memory"); \
+    } while (0)
+
+#else
 /* Pause instruction to prevent excess processor bus usage */
 #define WT_PAUSE() __asm__ volatile("pause\n" ::: "memory")
 #define WT_FULL_BARRIER()                        \
@@ -173,6 +190,8 @@ WT_ATOMIC_FUNC(size, size_t, size_t *vp, size_t v)
         __asm__ volatile("sfence" ::: "memory"); \
     } while (0)
 
+#endif
+
 #elif defined(i386) || defined(__i386__)
 #define WT_PAUSE() __asm__ volatile("pause\n" ::: "memory")
 #define WT_FULL_BARRIER()                                         \
diff --git a/src/include/time_inline.h b/src/include/time_inline.h
index 5b7c28d..83159f9 100644
--- a/src/include/time_inline.h
+++ b/src/include/time_inline.h
@@ -23,12 +23,20 @@ __wt_rdtsc(void)
         return (x);
     }
 #elif defined(__amd64)
+#if defined(__llir__)
+    {
+        uint64_t t;
+        __asm__ volatile("x86_rdtsc.i64 %0" : "=r"(t));
+        return t;
+    }
+#else
     {
         uint64_t a, d;
 
         __asm__ volatile("rdtsc" : "=a"(a), "=d"(d));
         return ((d << 32) | a);
     }
+#endif
 #else
     return (0);
 #endif
